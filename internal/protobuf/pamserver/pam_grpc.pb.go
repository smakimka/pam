// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pam.proto

package pamserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PamServer_Register_FullMethodName     = "/PamServer/Register"
	PamServer_Authenticate_FullMethodName = "/PamServer/Authenticate"
	PamServer_Upload_FullMethodName       = "/PamServer/Upload"
	PamServer_Get_FullMethodName          = "/PamServer/Get"
	PamServer_GetNames_FullMethodName     = "/PamServer/GetNames"
)

// PamServerClient is the client API for PamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PamServerClient interface {
	Register(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*AuthResponse, error)
	Authenticate(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*AuthResponse, error)
	Upload(ctx context.Context, in *UploadData, opts ...grpc.CallOption) (*UploadResponse, error)
	Get(ctx context.Context, in *GetData, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetNames(ctx context.Context, in *GetDataNames, opts ...grpc.CallOption) (*GetDataNamesResponse, error)
}

type pamServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPamServerClient(cc grpc.ClientConnInterface) PamServerClient {
	return &pamServerClient{cc}
}

func (c *pamServerClient) Register(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, PamServer_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pamServerClient) Authenticate(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, PamServer_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pamServerClient) Upload(ctx context.Context, in *UploadData, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, PamServer_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pamServerClient) Get(ctx context.Context, in *GetData, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, PamServer_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pamServerClient) GetNames(ctx context.Context, in *GetDataNames, opts ...grpc.CallOption) (*GetDataNamesResponse, error) {
	out := new(GetDataNamesResponse)
	err := c.cc.Invoke(ctx, PamServer_GetNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PamServerServer is the server API for PamServer service.
// All implementations must embed UnimplementedPamServerServer
// for forward compatibility
type PamServerServer interface {
	Register(context.Context, *AuthData) (*AuthResponse, error)
	Authenticate(context.Context, *AuthData) (*AuthResponse, error)
	Upload(context.Context, *UploadData) (*UploadResponse, error)
	Get(context.Context, *GetData) (*GetDataResponse, error)
	GetNames(context.Context, *GetDataNames) (*GetDataNamesResponse, error)
	mustEmbedUnimplementedPamServerServer()
}

// UnimplementedPamServerServer must be embedded to have forward compatible implementations.
type UnimplementedPamServerServer struct {
}

func (UnimplementedPamServerServer) Register(context.Context, *AuthData) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPamServerServer) Authenticate(context.Context, *AuthData) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedPamServerServer) Upload(context.Context, *UploadData) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedPamServerServer) Get(context.Context, *GetData) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPamServerServer) GetNames(context.Context, *GetDataNames) (*GetDataNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNames not implemented")
}
func (UnimplementedPamServerServer) mustEmbedUnimplementedPamServerServer() {}

// UnsafePamServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PamServerServer will
// result in compilation errors.
type UnsafePamServerServer interface {
	mustEmbedUnimplementedPamServerServer()
}

func RegisterPamServerServer(s grpc.ServiceRegistrar, srv PamServerServer) {
	s.RegisterService(&PamServer_ServiceDesc, srv)
}

func _PamServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PamServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PamServer_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PamServerServer).Register(ctx, req.(*AuthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PamServer_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PamServerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PamServer_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PamServerServer).Authenticate(ctx, req.(*AuthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PamServer_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PamServerServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PamServer_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PamServerServer).Upload(ctx, req.(*UploadData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PamServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PamServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PamServer_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PamServerServer).Get(ctx, req.(*GetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PamServer_GetNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PamServerServer).GetNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PamServer_GetNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PamServerServer).GetNames(ctx, req.(*GetDataNames))
	}
	return interceptor(ctx, in, info, handler)
}

// PamServer_ServiceDesc is the grpc.ServiceDesc for PamServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PamServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PamServer",
	HandlerType: (*PamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PamServer_Register_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _PamServer_Authenticate_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _PamServer_Upload_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PamServer_Get_Handler,
		},
		{
			MethodName: "GetNames",
			Handler:    _PamServer_GetNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pam.proto",
}
